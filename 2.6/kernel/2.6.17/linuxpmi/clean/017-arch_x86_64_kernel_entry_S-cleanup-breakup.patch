Index: linux/arch/x86_64/kernel/entry.S
===================================================================
--- linux.orig/arch/x86_64/kernel/entry.S	2006-09-28 15:02:03.000000000 +0200
+++ linux/arch/x86_64/kernel/entry.S	2006-09-28 15:02:17.000000000 +0200
@@ -43,6 +43,10 @@
 #include <asm/hw_irq.h>
 #include <asm/page.h>
 
+#ifdef CONFIG_OPENMOSIX
+#include "omasm.h"
+#endif /* CONFIG_OPENMOSIX */
+
 	.code64
 
 #ifndef CONFIG_PREEMPT
@@ -155,6 +159,15 @@
 	jmp rff_action
 	CFI_ENDPROC
 
+#ifdef CONFIG_OPENMOSIX
+ENTRY(ret_from_kickstart)
+	CFI_STARTPROC
+	swapgs
+	RESTORE_ALL 8
+	iretq
+	CFI_ENDPROC
+#endif /* CONFIG OPENMOSIX */
+
 /*
  * System call entry. Upto 6 arguments in registers are supported.
  *
@@ -205,6 +218,20 @@
 	jnz tracesys
 	cmpq $__NR_syscall_max,%rax
 	ja badsys
+#ifdef CONFIG_OPENMOSIX
+remote_or_local_syscall:
+	movq threadinfo_task(%rcx), %rcx
+	testq $DREMOTE, TASK_om+OM_dflags(%rcx) # is this a DREMOTE task ?
+	jz syscall_call
+remote_syscall_call:
+	movq %r10,%rcx
+	subq $6*8, %rsp
+	call *remote_sys_call_table(,%rax,8)
+	addq $6*8, %rsp
+	movq %rax,RAX-ARGOFFSET(%rsp)
+	jmp ret_from_sys_call
+syscall_call:
+#endif /* CONFIG_OPENMOSIX */
 	movq %r10,%rcx
 	call *sys_call_table(,%rax,8)  # XXX:	 rip relative
 	movq %rax,RAX-ARGOFFSET(%rsp)
@@ -370,6 +397,13 @@
  */ 								
 	
 	.macro PTREGSCALL label,func,arg
+#ifdef CONFIG_OPENMOSIX
+	.globl om_\label
+om_\label:
+	leaq	om_\func(%rip),%rax
+	leaq    -ARGOFFSET+8(%rsp),\arg /* 8 for return address */
+	jmp	om_ptregscall_common
+#endif
 	.globl \label
 \label:
 	leaq	\func(%rip),%rax
@@ -405,6 +439,26 @@
 	ret
 	CFI_ENDPROC
 	
+#ifdef CONFIG_OPENMOSIX
+ENTRY(om_ptregscall_common)
+	CFI_STARTPROC
+	addq $6*8, %rsp
+	popq %r11
+	CFI_ADJUST_CFA_OFFSET	-8
+	SAVE_REST
+	movq %r11, %r15
+	FIXUP_TOP_OF_STACK %r11
+	call *%rax
+	RESTORE_TOP_OF_STACK %r11
+	movq %r15, %r11
+	RESTORE_REST
+	pushq %r11
+	subq $6*8, %rsp
+	CFI_ADJUST_CFA_OFFSET	8
+	ret
+	CFI_ENDPROC
+#endif
+
 ENTRY(stub_execve)
 	CFI_STARTPROC
 	popq %r11
@@ -418,6 +472,27 @@
 	RESTORE_REST
 	jmp int_ret_from_sys_call
 	CFI_ENDPROC
+
+#ifdef CONFIG_OPENMOSIX
+ENTRY(om_stub_execve)
+	CFI_STARTPROC
+	popq %r11
+	CFI_ADJUST_CFA_OFFSET	-8
+	SAVE_REST
+	movq %r11, %r15
+	FIXUP_TOP_OF_STACK %r11
+	call remote_do_execve
+	GET_THREAD_INFO(%rcx)
+	# FIXME om doesn't support remote 32 bits tasks yet
+	#bt $TIF_IA32,threadinfo_flags(%rcx)
+	#jc exec_32bit
+	RESTORE_TOP_OF_STACK %r11
+	movq %r15, %r11
+	RESTORE_REST
+	push %r11
+	ret
+	CFI_ENDPROC
+#endif
 	
 /*
  * sigreturn is special because it needs to restore all registers on return.
@@ -551,6 +626,11 @@
 	bt    $TIF_NEED_RESCHED,%edx
 	jnc   retint_signal
 	sti
+#ifdef CONFIG_OPENMOSIX
+	SAVE_REST
+	call openmosix_pre_usermode
+	RESTORE_REST
+#endif /* CONFIG_OPENMOSIX */
 	pushq %rdi
 	CFI_ADJUST_CFA_OFFSET	8
 	call  schedule
@@ -861,6 +941,43 @@
 	xorl %edi, %edi
 	call do_exit
 
+#ifdef CONFIG_OPENMOSIX
+ENTRY(user_thread)
+	CFI_STARTPROC
+	FAKE_STACK_FRAME $user_child_rip
+	SAVE_ALL
+
+	# rdi: flags, rsi: usp, rdx: will be &pt_regs
+	movq %rdx,%rdi
+	orq  kernel_thread_flags(%rip),%rdi
+	movq $-1, %rsi
+	movq %rsp, %rdx
+
+	xorl %r8d,%r8d
+	xorl %r9d,%r9d
+	
+	# clone now
+	call do_fork
+	movq %rax,RAX(%rsp)
+	xorl %edi,%edi
+
+	/*
+	 * It isn't worth to check for reschedule here,
+	 * so internally to the x86_64 port you can rely on kernel_thread()
+	 * not to reschedule the child before returning, this avoids the need
+	 * of hacks for example to fork off the per-CPU idle tasks.
+         * [Hopefully no generic code relies on the reschedule -AK]	
+	 */
+	RESTORE_ALL
+	UNFAKE_STACK_FRAME
+	ret
+	CFI_ENDPROC
+
+user_child_rip:
+	subq $168, %rsp
+	jmp child_rip
+#endif /* CONFIG_OPENMOSIX */
+
 /*
  * execve(). This function needs to use IRET, not SYSRET, to set up all state properly.
  *
