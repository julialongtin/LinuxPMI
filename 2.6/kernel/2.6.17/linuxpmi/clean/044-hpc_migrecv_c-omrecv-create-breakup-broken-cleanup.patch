Index: linux/hpc/migrecv.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux/hpc/migrecv.c	2006-09-28 15:02:18.000000000 +0200
@@ -0,0 +1,411 @@
+/*
+ *	Copyright (C) 2002-2004 Moshe Bar <moshe@moshebar.com>
+ *	Copyright (C) 2005-2006 Vincent Hanquez <vincent@snarc.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published
+ * by the Free Software Foundation; version 2 only.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * Original Mosix code Copyright (C) Amnon Barak, Amnon Shiloh
+ *
+ * Changes for 2.6 by Vincent Hanquez and Alexander Nyberg
+ *
+ */
+
+#include <linux/sched.h>
+#include <linux/errno.h>
+#include <linux/mm.h>
+#include <linux/rmap.h>
+#include <linux/mman.h>
+#include <linux/stddef.h>
+#include <linux/highmem.h>
+#include <linux/personality.h>
+#include <asm/mmu_context.h>
+#include <asm/tlbflush.h>
+#include <hpc/comm.h>
+#include <hpc/task.h>
+#include <hpc/hpc.h>
+#include <hpc/service.h>
+#include <hpc/mig.h>
+#include <hpc/debug.h>
+#include <hpc/protocol.h>
+#include <hpc/prototype.h>
+#include <hpc/version.h>
+#include <hpc/arch.h>
+
+/* handshake with the remote part */
+int mig_recv_hshake(struct socket *mlink)
+{
+	int error;
+	struct omp_mig_handshake hshake;
+
+	/* receive request of whatever */
+	error = comm_recv(mlink, &hshake, sizeof(hshake));
+	if (error < 0) {
+		OMBUG("recv failed %d\n", error);
+		return -1;
+	}
+
+	/* FIXME: sanity checks here */
+
+	/* reply of mig_requests */
+	hshake.type = hshake.type | HSHAKE_REPLY;
+	hshake.version = OPENMOSIX_VERSION;
+
+	error = comm_send(mlink, &hshake, sizeof(hshake));
+	if (error < 0) {
+		OMBUG("send failed %d\n", error);
+		return -1;
+	}
+
+	return 0;
+}
+
+/*****************************************************************************/
+
+/**
+ * mig_do_receive_mig_mm - Receive some parameters for a mm
+ **/
+static void mig_do_receive_mm(task_t *p, struct omp_mig_mm *s)
+{
+	OMDEBUG_MIG(2, "MIG_MM\n");
+	/* copy all mm's parameter from start_code to env_end */
+	memcpy(&p->mm->start_code, s, sizeof(*s));
+}
+
+/**
+ * mig_do_receive_mm_area - Set up an mmap
+ **/
+static int mig_do_receive_vma(task_t *p, struct omp_mig_vma *a)
+{
+	unsigned long result, prot, flags;
+	struct file *file = NULL;
+	extern asmlinkage long sys_madvise(unsigned long, size_t, int);
+
+	OMDEBUG_MIG(2, "MIG_VMA [%lx, %ld]\n", a->vm_start, a->vm_size);
+
+	/* FIXME : Temporary disabled */
+	if (0 && a->vm_file) {
+		file = (task_test_dflags(p, DREMOTE))
+			? task_rfiles_get(p, a->vm_file, -1, a->i_size)
+			: a->vm_file;
+	}
+
+	/* unconvert prot+flags: */
+	flags = MAP_FIXED | MAP_PRIVATE;
+	prot = 0;
+	if (a->vm_flags & VM_GROWSDOWN)
+		flags |= MAP_GROWSDOWN;
+	if (a->vm_flags & VM_DENYWRITE)
+		flags |= MAP_DENYWRITE;
+	if (a->vm_flags & VM_EXECUTABLE)
+		flags |= MAP_EXECUTABLE;
+
+	/* copy VM_(READ|WRITE|EXEC) bits to prot */
+	prot |= (a->vm_flags & (VM_READ | VM_WRITE | VM_EXEC));
+
+	/* mmap stuff */
+	result = do_mmap_pgoff(file, a->vm_start, a->vm_size, prot,
+						flags, a->vm_pgoff);
+	if (IS_ERR((const void *) result))
+		return PTR_ERR((const void *) result);
+
+	if (a->vm_flags & VM_READHINTMASK) {
+		int behavior = (a->vm_flags & VM_SEQ_READ)
+				? MADV_RANDOM
+				: MADV_SEQUENTIAL;
+		sys_madvise(a->vm_start, a->vm_size, behavior);
+	}
+	return 0;
+}
+
+
+/**
+ * mig_do_receive_page - Receive one page
+ **/
+static int mig_do_receive_page(task_t *p, unsigned long addr)
+{
+	struct mm_struct *mm = p->mm;
+	struct vm_area_struct *vma;
+	struct page *recv_page = NULL;
+	void *kmpage; /* kmapped page */
+	int error;
+	pgd_t * pgd;
+	pud_t * pud;
+	pmd_t * pmd;
+	pte_t * pte;
+
+	OMDEBUG_MIG(3, "MIG_PAGE [%lx]\n", addr);
+
+	vma = find_vma(mm, addr);
+	if (!vma) {
+		OMBUG("vma not found (addr: %p)\n", (void *) addr);
+		return -1;
+	}
+
+	/* check if enough memory */
+
+	/* alloc page */
+	recv_page = alloc_page(GFP_HIGHUSER);
+	if (!recv_page) {
+		OMBUG("unable to allocate page\n");
+		return -ENOMEM;
+	}
+
+	kmpage = kmap(recv_page);
+
+	/* receive the data into the page */
+	error = comm_recv(p->om.contact, kmpage, PAGE_SIZE);
+
+	kunmap(recv_page);
+	if (error < 0) {
+		OMBUG("failed to receive data\n");
+		goto out;
+	}
+
+	/* add the page at correct place */
+	pgd = pgd_offset(mm, addr);
+	pud = pud_alloc(mm, pgd, addr);
+	if (!pud)
+		goto out;
+	pmd = pmd_alloc(mm, pud, addr);
+	if (!pmd)
+		goto out;
+	pte = pte_alloc_map(mm, pmd, addr);
+	if (!pte)
+		goto out;
+	if (!pte_none(*pte))
+		OMBUG("double page at addr %p\n", (void *) addr);
+
+	set_pte(pte, pte_mkdirty(mk_pte(recv_page, vma->vm_page_prot)));
+	pte_unmap(pte);
+	page_dup_rmap(recv_page);
+	inc_mm_counter(mm, file_rss);
+
+	return 0;
+out:
+	OMBUG("receive page failed at addr %p\n", (void *) addr);
+	__free_page(recv_page);
+	return -1;
+}
+
+/**
+ * mig_do_receive_fp - Receive floating points registers
+ * @p:		task
+ * @fpr:	floating point registers
+ **/
+static void mig_do_receive_fp(task_t *p, struct omp_mig_fp *fp)
+{
+	OMDEBUG_MIG(2, "MIG_FP\n");
+	set_used_math();
+	arch_mig_receive_fp(p, fp);
+}
+
+/**
+ * mig_do_receive_misc - Receive normal registers, limits
+ **/
+static void mig_do_receive_proc_context(task_t *p, struct omp_mig_task *m)
+{
+	OMDEBUG_MIG(1, "MIG_TASK\n");
+	/* arch specific proc receive context */
+	arch_mig_receive_proc_context(p, m);
+
+	/* copy id */
+	p->om.pid = m->pid;
+	p->om.tgid = m->tgid;
+
+	/* copy credentials */
+	p->uid = m->uid;
+	p->euid = m->euid;
+	p->suid = m->suid;
+	p->fsuid = m->fsuid;
+
+	p->gid = m->gid;
+	p->egid = m->egid;
+	p->sgid = m->sgid;
+	p->fsgid = m->fsgid;
+
+	/* signals stuffs */
+	p->blocked = m->blocked;
+	p->real_blocked = m->real_blocked;
+	p->sas_ss_sp = m->sas_ss_sp;
+	p->sas_ss_size = m->sas_ss_size;
+	memcpy(p->sighand->action, m->sighand, sizeof(struct k_sigaction)
+								* _NSIG);
+
+	/* FIXME we don't trust the other node anyway so copy rlimit from node[nr] */
+
+	memcpy(p->comm, m->comm, sizeof(m->comm));
+
+	p->personality = m->personality;
+	arch_pick_mmap_layout(p->mm);
+}
+
+/**
+ * mig_do_receive - Receive all process stuff (mm, pages, fpr, ..)
+ **/
+int mig_do_receive(task_t *p)
+{
+	int error;
+	unsigned int got_not_coming = 0;
+	unsigned long data;
+	struct omp_req req;
+
+	data = __get_free_page(GFP_KERNEL);
+	if (!data)
+		goto fail;
+
+	task_set_dflags(p, DINCOMING);
+	clear_used_math();
+
+	while (1) {
+		error = comm_recv(p->om.contact, &req, sizeof(req));
+		if (error < 0)
+			goto fail;
+
+		BUG_ON(req.dlen > PAGE_SIZE);
+		error = comm_recv(p->om.contact, (void *) data, req.dlen);
+		if (error < 0)
+			goto fail;
+
+		switch (req.type) {
+		case MIG_MM:
+			mig_do_receive_mm(p, (struct omp_mig_mm *) data);
+			break;
+		case MIG_VMA:
+			if (mig_do_receive_vma(p, (struct omp_mig_vma *) data))
+				goto fail;
+			break;
+		case MIG_PAGE:
+			if (mig_do_receive_page(p, *((unsigned long *) data)))
+				goto fail;
+			break;
+		case MIG_FP:
+			mig_do_receive_fp(p, (struct omp_mig_fp *) data);
+			break;
+		case MIG_ARCH:
+			if (arch_mig_receive_specific(p, (struct omp_mig_arch *) data))
+				goto fail;
+			break;
+		/* this is the last thing we do in the chain of receiving,
+		 * so return 0 after we're done */
+		case MIG_TASK:
+			mig_do_receive_proc_context(p, (struct omp_mig_task *) data);
+			comm_send_req(p->om.contact, MIG_TASK | REPLY);
+			task_clear_dflags(p, DINCOMING);
+
+			flush_tlb_mm(p->mm); /* for all the new pages */
+			return 0;
+		case MIG_ABORT:
+			printk("mig_do_recv(): got MIG_ABORT\n");
+			got_not_coming = 1;
+			goto fail;
+		default:
+			printk("mig_do_recv(): got default\n");
+			goto fail;
+		}
+	}
+fail:
+	task_clear_dflags(p, DINCOMING);
+	free_page(data);
+
+	OMBUG("failed\n");
+	return -1;
+}
+
+static NORET_TYPE int mig_handle_migration(void *ptr)
+{
+	task_t *p = current;
+	/* link against the other end */
+	struct socket *link = (struct socket *) ptr;
+	int error;
+
+	OM_VERBOSE_MIG("[OM] receiving new process\n");
+
+	task_set_comm(p, link);
+
+	error = obtain_mm(p);
+	if (error)
+		goto fail;
+	if (mig_recv_hshake(link))
+		goto fail;
+
+	error = mig_do_receive(p);
+
+	if (error)
+		goto fail;
+
+	OM_VERBOSE_MIG("[OM] starting process(%d)\n", p->pid);
+	reparent_to_init();
+	arch_kickstart(p);
+	/*NOTREACHED*/
+
+fail:
+	OMBUG("failed\n");
+	do_exit(SIGKILL);
+	/*NOTREACHED*/
+}
+
+/**
+ * openmosix_mig_daemon - openMosix migration daemon
+ * @nothing:	unused
+ *
+ * Description:
+ * 	start the migration daemon.
+ * 	wait for communication, and if it is a remote request
+ * 	then start a user-thread with the new program to run
+ **/
+int openmosix_mig_daemon(void *nothing)
+{
+	task_t *p = current;
+	int error;
+	struct socket *mlink;
+	struct sockaddr saddr;
+
+	om_daemonize("omkmigd", 0);
+
+	task_set_dflags(p, DREMOTEDAEMON);
+
+	set_our_addr(AF_INET, &saddr, REMOTE_DAEMON_PORT);
+
+restart:
+	if (!p->om.contact) {
+		p->om.contact = comm_setup_listen(&saddr);
+		if (!p->om.contact) {
+			printk(KERN_WARNING
+				"omkmigd: failed to open mig service\n");
+			flush_signals(p);
+			set_current_state(TASK_INTERRUPTIBLE);
+			schedule_timeout(HZ);
+			goto restart;
+		}
+	}
+
+	/* migration daemon loop */
+	while (1)
+	{
+		error = comm_accept(p->om.contact, &mlink, &saddr, 0UL);
+		if (error == -EINTR || error == -ERESTART || error == -EAGAIN
+		   || error == -ERESTARTSYS)
+		{
+			if (sigismember(&(p->pending.signal), SIGCHLD)) {
+				printk("omigd: SIGCHLD caught\n");
+			}
+			flush_signals(p);
+			continue;
+		} else if (error) {
+			OMBUG("failed to accept\n");
+			comm_close(mlink);
+			goto restart;
+		}
+
+		error = user_thread(mig_handle_migration, (void *) mlink, 0);
+		if (error < 0)
+			comm_close(mlink);
+	}
+}
