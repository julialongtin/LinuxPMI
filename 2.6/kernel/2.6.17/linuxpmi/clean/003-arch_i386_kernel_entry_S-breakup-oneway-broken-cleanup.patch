Index: linux/arch/i386/kernel/entry.S
===================================================================
--- linux.orig/arch/i386/kernel/entry.S	2006-09-28 15:02:03.000000000 +0200
+++ linux/arch/i386/kernel/entry.S	2006-09-28 15:02:16.000000000 +0200
@@ -50,6 +50,11 @@
 #include <asm/desc.h>
 #include "irq_vectors.h"
 
+#ifdef CONFIG_OPENMOSIX
+#include <asm/asm-offsets.h>
+#include "omasm.h"
+#endif /* CONFIG_OPENMOSIX */
+
 #define nr_syscalls ((syscall_table_size)/4)
 
 EBX		= 0x00
@@ -130,6 +135,19 @@
 	popl %eax
 	jmp syscall_exit
 
+#ifdef CONFIG_OPENMOSIX
+ENTRY(ret_from_deputy_fork)
+	pushl %eax
+	call schedule_tail
+	GET_THREAD_INFO(%ebp)
+	popl %eax
+	jmp syscall_exit
+
+ENTRY(ret_from_kickstart)
+	GET_THREAD_INFO(%ebp)
+	jmp syscall_exit
+#endif /* CONFIG OPENMOSIX */
+
 /*
  * Return to user mode is not as complex as all this looks,
  * but we want the default path for a system call return to
@@ -155,6 +173,9 @@
 	andl $_TIF_WORK_MASK, %ecx	# is there any work to be done on
 					# int/exception return?
 	jne work_pending
+#ifdef CONFIG_OPENMOSIX
+	call openmosix_pre_usermode
+#endif /* CONFIG_OPENMOSIX */
 	jmp restore_all
 
 #ifdef CONFIG_PREEMPT
@@ -207,8 +228,23 @@
 	jnz syscall_trace_entry
 	cmpl $(nr_syscalls), %eax
 	jae syscall_badsys
+#ifdef CONFIG_OPENMOSIX
+remote_or_local_sysenter:
+	movl TI_task(%ebp), %ebp
+	testl $DREMOTE, TASK_om+OM_dflags(%ebp)	# is this a DREMOTE task ?
+	jz sysenter_syscall_call
+sysenter_remote_syscall_call:
+	call *remote_sys_call_table(,%eax,4)
+	movl %eax,EAX(%esp)		# store the return value
+	jmp sysenter_exit
+sysenter_syscall_call:
+#endif /* CONFIG_OPENMOSIX */
 	call *sys_call_table(,%eax,4)
 	movl %eax,EAX(%esp)
+#ifdef CONFIG_OPENMOSIX
+sysenter_exit:
+	GET_THREAD_INFO(%ebp)
+#endif /* CONFIG_OPENMOSIX */
 	cli
 	movl TI_flags(%ebp), %ecx
 	testw $_TIF_ALLWORK_MASK, %cx
@@ -236,10 +272,21 @@
 	jnz syscall_trace_entry
 	cmpl $(nr_syscalls), %eax
 	jae syscall_badsys
+#ifdef CONFIG_OPENMOSIX
+remote_or_local_syscall:
+	movl TI_task(%ebp), %ebp
+	testl $DREMOTE, TASK_om+OM_dflags(%ebp)	# is this a DREMOTE task ?
+	jz syscall_call
+remote_syscall_call:
+	call *remote_sys_call_table(,%eax,4)
+	movl %eax,EAX(%esp)		# store the return value
+	jmp syscall_exit
+#endif /* CONFIG_OPENMOSIX */
 syscall_call:
 	call *sys_call_table(,%eax,4)
 	movl %eax,EAX(%esp)		# store the return value
 syscall_exit:
+	GET_THREAD_INFO(%ebp)
 	cli				# make sure we don't miss an interrupt
 					# setting need_resched or sigpending
 					# between sampling and the iret
