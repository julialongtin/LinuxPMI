= arch/x86/include/asm/tmig64.h =

== Summary ==
This file contains architecture specific helper functions used by the system
call redirection subsystem, as well as a helper for the process
teardown/buildup code. It is included by arch/x86/include/asm/pms.h.

== Details ==
First, we define the maximum number of arguments a system call can be passed on
this architecture, which is 6, per entry.S.

Next we define arch_get_sys_arg, an inline function. It is called by
hpc/remote.c's `remote_do_syscall` directly, and wrapped by
include/hpc/syscalls.h's `SYSARG` macro, which is used by hpc/syscalls.c's
`pms_sys_execve`. Its purpose is to return the N'th argument passed into the
syscall that inlines us. In it, we pull the appropriate argument from the
passed in `pt_regs` structure, confirming to the order in the AMD64
ABI^<<note1>>^, and the kernel's entry.S. If we are asked for an argument index
greater than the sixth, we `BUG_ON()` about it.

`arch_get_sys_nb` is defined as an inline function. It is wrapped by
include/hpc/syscall.h's `SYSNB` macro, and called by `pms_sys_remote` to return
the system call number of the system call request we're currently handling. On
x86_64, this is stored in the `rax` register per entry.S, so we simply return
the lower 32bits^<<fixme1>>^ of the `rax` member of the passed in `pt_regs`
structure.

Finally, we create `ARCH_TASK_GET_USER_REGS`,^<<fixme3>>^ which is a macro to
get the user registers of the current task, called by hpc/arch-x86_64.c's
arch_mig_receive_proc_context, arch_mig_send_proc_context, arch_kickstart, and
arch_do_signal, along with hpc/debug-x86_64.c's pms_debug_regs, and
show_user_registers. It functions identically to
include/asm-x86_64/processor.h's `task_pt_regs`, returning the `pt_regs` struct
belonging to the thread pointed to by the passed in task pointer. In it, we get
the given task's thread's `rsp0` member, and deduct 1, returning what we've
calculated as a `pt_regs` pointer.

== Notes and Comments ==
[[fixme1]]
^[fixme1]^FIXME: find out why we're only using the bottom half of `rax`.

[[fixme3]]
^[fixme3]^FIXME: replace code using this with processor.h's `task_pt_regs`.

[[note1]]
^[note1]^ http://www.x86-64.org/documentation/abi.pdf version 0.99
