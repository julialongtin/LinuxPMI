diff --exclude=.git -Nru linux-2.6.28.7/arch/x86/include/asm/pms_64.h linux-2.6.28.7-pms/arch/x86/include/asm/pms_64.h
--- linux-2.6.28.7/arch/x86/include/asm/pms_64.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.28.7-pms/arch/x86/include/asm/pms_64.h	2009-03-06 19:59:09.000000000 +0000
@@ -0,0 +1,76 @@
+ /*
+ *	Copyright (C) 2002-2004 Moshe Bar <moshe@moshebar.com>
+ *	Copyright (C) 2005-2006 Vincent Hanquez <vincent@snarc.org>
+ *     Copyright (C) 2007-2009 Julia Longtin <juri@solarnetone.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published
+ * by the Free Software Foundation; version 2 only.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * Original Mosix code Copyright (C) Amnon Barak, Amnon Shiloh
+ *
+ * Changes for 2.6 by Vincent Hanquez and Alexander Nyberg
+ * Changes for 2.6.28.7 by G_remlin <g_remlin@rocketmail.com>
+ * Additional changes by Julia Longtin <juri@solarnetone.org>
+ *
+ */
+
+#ifdef CONFIG_X86_64
+#ifndef _TMIG_ARCH_TMIG64_H
+#define _TMIG_ARCH_TMIG64_H
+
+/* The maximum number of arguments that may be passed to a system call
+   on this archetecture */
+#define NR_MAX_SYSCALL_ARG	6
+
+/**
+ * arch_get_sys_arg - return the Nth argument passed to the current syscall
+ * @n: the argument number to return
+ * @regs: our current pt_regs structure
+ *
+ * called in syscall context
+ *
+ * Conforming to the order in entry.S, and the AMD64 ABI
+ *
+ * calls BUG_ON if n>NR_MAX_SYSCALL_ARG, the argument requested otherwise
+ **/
+static inline long arch_get_sys_arg(unsigned int n, struct pt_regs *regs)
+{
+	BUG_ON(n >= NR_MAX_SYSCALL_ARG);
+ 	switch (n) {
+ 		case 0: return regs->rdi;
+ 		case 1: return regs->rsi;
+ 		case 2: return regs->rdx;
+ 		case 3: return regs->r10;
+ 		case 4: return regs->r8;
+ 		case 5: return regs->r9;
+ 	}
+ }
+ 
+/**
+ * arch_get_sys_nb - return the number of the current syscall
+ * @regs: the our current pt_regs structure
+ *
+ * called in syscall context
+ *
+ * Conforming to entry.S and the AMD64 ABI
+ *
+ * returns the system call number we're currently handling
+ **/
+static inline int arch_get_sys_nb(struct pt_regs *regs)
+{
+ 	return (int) (regs->rax & 0xffffffff);
+}
+ 
+/* ARCH_TASK_GET_USER_REGS: evaluates to the pt_regs of the currently
+   executing thread */
+/* #define ARCH_TASK_GET_USER_REGS(p) (((struct pt_regs *) (THREAD_SIZE +(unsigned long) current_thread_info())) - 1) */
+#define ARCH_TASK_GET_USER_REGS(p) ((struct pt_regs *)(p)->thread.rsp0 - 1)
+
+#endif /* _TMIG_ARCH_TMIG64_H */
+#endif /* CONFIG_X86_64 */
